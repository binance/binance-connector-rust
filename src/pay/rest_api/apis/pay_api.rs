/*
 * Binance Pay REST API
 *
 * OpenAPI Specification for the Binance Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use async_trait::async_trait;
use derive_builder::Builder;
use reqwest;
use rust_decimal::prelude::*;
use serde::{Deserialize, Serialize};
use serde_json::{Value, json};
use std::collections::BTreeMap;

use crate::common::{
    config::ConfigurationRestApi,
    models::{ParamBuildError, RestApiResponse},
    utils::send_request,
};
use crate::pay::rest_api::models;

const HAS_TIME_UNIT: bool = false;

#[async_trait]
pub trait PayApi: Send + Sync {
    async fn get_pay_trade_history(
        &self,
        params: GetPayTradeHistoryParams,
    ) -> anyhow::Result<RestApiResponse<models::GetPayTradeHistoryResponse>>;
}

#[derive(Debug, Clone)]
pub struct PayApiClient {
    configuration: ConfigurationRestApi,
}

impl PayApiClient {
    pub fn new(configuration: ConfigurationRestApi) -> Self {
        Self { configuration }
    }
}

/// Request parameters for the [`get_pay_trade_history`] operation.
///
/// This struct holds all of the inputs you can pass when calling
/// [`get_pay_trade_history`](#method.get_pay_trade_history).
#[derive(Clone, Debug, Builder, Default)]
#[builder(pattern = "owned", build_fn(error = "ParamBuildError"))]
pub struct GetPayTradeHistoryParams {
    ///
    /// The `start_time` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub start_time: Option<i64>,
    ///
    /// The `end_time` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub end_time: Option<i64>,
    /// default 100, max 100
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub limit: Option<i64>,
    ///
    /// The `recv_window` parameter.
    ///
    /// This field is **optional.
    #[builder(setter(into), default)]
    pub recv_window: Option<i64>,
}

impl GetPayTradeHistoryParams {
    /// Create a builder for [`get_pay_trade_history`].
    ///
    #[must_use]
    pub fn builder() -> GetPayTradeHistoryParamsBuilder {
        GetPayTradeHistoryParamsBuilder::default()
    }
}

#[async_trait]
impl PayApi for PayApiClient {
    async fn get_pay_trade_history(
        &self,
        params: GetPayTradeHistoryParams,
    ) -> anyhow::Result<RestApiResponse<models::GetPayTradeHistoryResponse>> {
        let GetPayTradeHistoryParams {
            start_time,
            end_time,
            limit,
            recv_window,
        } = params;

        let mut query_params = BTreeMap::new();

        if let Some(rw) = start_time {
            query_params.insert("startTime".to_string(), json!(rw));
        }

        if let Some(rw) = end_time {
            query_params.insert("endTime".to_string(), json!(rw));
        }

        if let Some(rw) = limit {
            query_params.insert("limit".to_string(), json!(rw));
        }

        if let Some(rw) = recv_window {
            query_params.insert("recvWindow".to_string(), json!(rw));
        }

        send_request::<models::GetPayTradeHistoryResponse>(
            &self.configuration,
            "/sapi/v1/pay/transactions",
            reqwest::Method::GET,
            query_params,
            if HAS_TIME_UNIT {
                self.configuration.time_unit
            } else {
                None
            },
            true,
        )
        .await
    }
}

#[cfg(all(test, feature = "pay"))]
mod tests {
    use super::*;
    use crate::TOKIO_SHARED_RT;
    use crate::{errors::ConnectorError, models::DataFuture, models::RestApiRateLimit};
    use async_trait::async_trait;
    use std::collections::HashMap;

    struct DummyRestApiResponse<T> {
        inner: Box<dyn FnOnce() -> DataFuture<Result<T, ConnectorError>> + Send + Sync>,
        status: u16,
        headers: HashMap<String, String>,
        rate_limits: Option<Vec<RestApiRateLimit>>,
    }

    impl<T> From<DummyRestApiResponse<T>> for RestApiResponse<T> {
        fn from(dummy: DummyRestApiResponse<T>) -> Self {
            Self {
                data_fn: dummy.inner,
                status: dummy.status,
                headers: dummy.headers,
                rate_limits: dummy.rate_limits,
            }
        }
    }

    struct MockPayApiClient {
        force_error: bool,
    }

    #[async_trait]
    impl PayApi for MockPayApiClient {
        async fn get_pay_trade_history(
            &self,
            _params: GetPayTradeHistoryParams,
        ) -> anyhow::Result<RestApiResponse<models::GetPayTradeHistoryResponse>> {
            if self.force_error {
                return Err(
                    ConnectorError::ConnectorClientError("ResponseError".to_string()).into(),
                );
            }

            let resp_json: Value = serde_json::from_str(r#"{"code":"000000","message":"success","data":[{"orderType":"C2C","transactionId":"M_P_71505104267788288","transactionTime":1610090460133,"amount":"23.72469206","currency":"BNB","walletType":1,"walletTypes":[1,2],"fundsDetail":[{"currency":"USDT","amount":"1.2","walletAssetCost":[{"1":"0.6"},{"2":"0.6"}]},{"currency":"ETH","amount":"0.0001","walletAssetCost":[{"1":"0.00005"},{"2":"0.00005"}]}],"payerInfo":{"name":"Jack","type":"USER","binanceId":"12345678"},"receiverInfo":{"name":"Alan","type":"MERCHANT","email":"alan@binance.com","binanceId":"34355667","accountId":"21326891","countryCode":"1","phoneNumber":"8057651210","mobileCode":"US","extend":{"institutionName":"","cardNumber":"","digitalWalletId":""}}}],"success":true}"#).unwrap();
            let dummy_response: models::GetPayTradeHistoryResponse =
                serde_json::from_value(resp_json.clone())
                    .expect("should parse into models::GetPayTradeHistoryResponse");

            let dummy = DummyRestApiResponse {
                inner: Box::new(move || Box::pin(async move { Ok(dummy_response) })),
                status: 200,
                headers: HashMap::new(),
                rate_limits: None,
            };

            Ok(dummy.into())
        }
    }

    #[test]
    fn get_pay_trade_history_required_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockPayApiClient { force_error: false };

            let params = GetPayTradeHistoryParams::builder().build().unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"code":"000000","message":"success","data":[{"orderType":"C2C","transactionId":"M_P_71505104267788288","transactionTime":1610090460133,"amount":"23.72469206","currency":"BNB","walletType":1,"walletTypes":[1,2],"fundsDetail":[{"currency":"USDT","amount":"1.2","walletAssetCost":[{"1":"0.6"},{"2":"0.6"}]},{"currency":"ETH","amount":"0.0001","walletAssetCost":[{"1":"0.00005"},{"2":"0.00005"}]}],"payerInfo":{"name":"Jack","type":"USER","binanceId":"12345678"},"receiverInfo":{"name":"Alan","type":"MERCHANT","email":"alan@binance.com","binanceId":"34355667","accountId":"21326891","countryCode":"1","phoneNumber":"8057651210","mobileCode":"US","extend":{"institutionName":"","cardNumber":"","digitalWalletId":""}}}],"success":true}"#).unwrap();
            let expected_response : models::GetPayTradeHistoryResponse = serde_json::from_value(resp_json.clone()).expect("should parse into models::GetPayTradeHistoryResponse");

            let resp = client.get_pay_trade_history(params).await.expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn get_pay_trade_history_optional_params_success() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockPayApiClient { force_error: false };

            let params = GetPayTradeHistoryParams::builder().start_time(1623319461670).end_time(1641782889000).limit(100).recv_window(5000).build().unwrap();

            let resp_json: Value = serde_json::from_str(r#"{"code":"000000","message":"success","data":[{"orderType":"C2C","transactionId":"M_P_71505104267788288","transactionTime":1610090460133,"amount":"23.72469206","currency":"BNB","walletType":1,"walletTypes":[1,2],"fundsDetail":[{"currency":"USDT","amount":"1.2","walletAssetCost":[{"1":"0.6"},{"2":"0.6"}]},{"currency":"ETH","amount":"0.0001","walletAssetCost":[{"1":"0.00005"},{"2":"0.00005"}]}],"payerInfo":{"name":"Jack","type":"USER","binanceId":"12345678"},"receiverInfo":{"name":"Alan","type":"MERCHANT","email":"alan@binance.com","binanceId":"34355667","accountId":"21326891","countryCode":"1","phoneNumber":"8057651210","mobileCode":"US","extend":{"institutionName":"","cardNumber":"","digitalWalletId":""}}}],"success":true}"#).unwrap();
            let expected_response : models::GetPayTradeHistoryResponse = serde_json::from_value(resp_json.clone()).expect("should parse into models::GetPayTradeHistoryResponse");

            let resp = client.get_pay_trade_history(params).await.expect("Expected a response");
            let data_future = resp.data();
            let actual_response = data_future.await.unwrap();
            assert_eq!(actual_response, expected_response);
        });
    }

    #[test]
    fn get_pay_trade_history_response_error() {
        TOKIO_SHARED_RT.block_on(async {
            let client = MockPayApiClient { force_error: true };

            let params = GetPayTradeHistoryParams::builder().build().unwrap();

            match client.get_pay_trade_history(params).await {
                Ok(_) => panic!("Expected an error"),
                Err(err) => {
                    assert_eq!(err.to_string(), "Connector client error: ResponseError");
                }
            }
        });
    }
}
