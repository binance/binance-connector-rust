/*
 * Binance Pay REST API
 *
 * OpenAPI Specification for the Binance Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#![allow(unused_imports)]
use http::Method;
use serde::de::DeserializeOwned;
use serde_json::Value;
use std::collections::BTreeMap;

use crate::common::{config::ConfigurationRestApi, models::RestApiResponse, utils::send_request};

mod apis;
mod models;

pub use apis::*;
pub use models::*;

#[derive(Debug, Clone)]
pub struct RestApi {
    configuration: ConfigurationRestApi,
    pay_api_client: PayApiClient,
}

impl RestApi {
    pub fn new(configuration: ConfigurationRestApi) -> Self {
        let pay_api_client = PayApiClient::new(configuration.clone());

        Self {
            configuration,
            pay_api_client,
        }
    }

    /// Send an unsigned request to the API
    ///
    /// # Arguments
    ///
    /// * `endpoint` - The API endpoint to send the request to
    /// * `method` - The HTTP method to use for the request
    /// * `params` - A map of parameters to send with the request
    ///
    /// # Returns
    ///
    /// A `RestApiResponse` containing the deserialized response data on success, or an error if the request fails
    ///
    /// # Errors
    ///
    /// Returns an `anyhow::Error` if the HTTP request fails or if parsing the response fails
    pub async fn send_request<R: DeserializeOwned + Send + 'static>(
        &self,
        endpoint: &str,
        method: Method,
        params: BTreeMap<String, Value>,
    ) -> anyhow::Result<RestApiResponse<R>> {
        send_request::<R>(&self.configuration, endpoint, method, params, None, false).await
    }

    /// Send a signed request to the API
    ///
    /// # Arguments
    ///
    /// * `endpoint` - The API endpoint to send the request to
    /// * `method` - The HTTP method to use for the request
    /// * `params` - A map of parameters to send with the request
    ///
    /// # Returns
    ///
    /// A `RestApiResponse` containing the deserialized response data on success, or an error if the request fails
    ///
    /// # Errors
    ///
    /// Returns an `anyhow::Error` if the HTTP request fails or if parsing the response fails
    pub async fn send_signed_request<R: DeserializeOwned + Send + 'static>(
        &self,
        endpoint: &str,
        method: Method,
        params: BTreeMap<String, Value>,
    ) -> anyhow::Result<RestApiResponse<R>> {
        send_request::<R>(&self.configuration, endpoint, method, params, None, true).await
    }

    /// Get Pay Trade History
    ///
    /// Get Pay Trade History
    ///
    /// * If startTime and endTime are not sent, the recent 90 days' data will be returned.
    /// * The max interval between startTime and endTime is 90 days.
    /// * Support for querying orders within the last 18 months.
    /// * For payerInfo and receiverInfoï¼Œthere are different return values in different orderTypes.
    /// * Sender's perspective when orderType is C2C
    /// * payerInfo : binanceId
    /// * receiverInfo : name, binanceId/accountId/email/countryCode/phoneNumber/mobileCode (based on user input)
    /// * Receiver's perspective when orderType is C2C
    /// * payerInfo : name
    /// * receiverInfo : binanceId
    /// * Sender's perspective when orderType is `CRYPTO_BOX`
    /// * payerInfo : binanceId
    /// * receiverInfo : name(the value is always "Crypto Box")
    /// * Receiver's perspective when orderType is `CRYPTO_BOX`
    /// * payerInfo : name
    /// * receiverInfo : binanceId
    /// * Sender's perspective when orderType is PAY
    /// * payerInfo : binanceId
    /// * receiverInfo : name
    /// * Receiver's perspective when orderType is PAY
    /// * payerInfo : name
    /// * receiverInfo : binanceId, name
    /// * Sender's perspective when orderType is `PAY_REFUND`
    /// * payerInfo : binanceId, name
    /// * receiverInfo : name, accountId
    /// * Receiver's perspective when orderType is `PAY_REFUND`
    /// * payerInfo : name
    /// * receiverInfo :  binanceId
    /// * Sender's perspective when orderType is PAYOUT
    /// * payerInfo : binanceId, name
    /// * receiverInfo : name, accountId
    /// * Receiver's perspective when orderType is PAYOUT
    /// * payerInfo : name
    /// * receiverInfo :  binanceId
    /// * Receiver's perspective when orderType is `CRYPTO_BOX_RF`
    /// * payerInfo : name(the value is always "Crypto Box")
    /// * receiverInfo : binanceId
    /// * Sender's perspective when orderType is REMITTANCE
    /// * payerInfo : binanceId
    /// * receiverInfo : name, institutionName, cardNumber, digitalWalletId
    ///
    /// Weight: 3000
    ///
    /// # Arguments
    ///
    /// - `params`: [`GetPayTradeHistoryParams`]
    ///   The parameters for this operation.
    ///
    /// # Returns
    ///
    /// [`RestApiResponse<models::GetPayTradeHistoryResponse>`] on success.
    ///
    /// # Errors
    ///
    /// This function will return an [`anyhow::Error`] if:
    /// - the HTTP request fails
    /// - any parameter is invalid
    /// - the response cannot be parsed
    /// - or one of the following occurs:
    ///   - `RequiredError`
    ///   - `ConnectorClientError`
    ///   - `UnauthorizedError`
    ///   - `ForbiddenError`
    ///   - `TooManyRequestsError`
    ///   - `RateLimitBanError`
    ///   - `ServerError`
    ///   - `NotFoundError`
    ///   - `NetworkError`
    ///   - `BadRequestError`
    ///
    ///
    /// For full API details, see the [Binance API Documentation](https://developers.binance.com/docs/pay/rest-api/Get-Pay-Trade-History).
    ///
    pub async fn get_pay_trade_history(
        &self,
        params: GetPayTradeHistoryParams,
    ) -> anyhow::Result<RestApiResponse<models::GetPayTradeHistoryResponse>> {
        self.pay_api_client.get_pay_trade_history(params).await
    }
}
